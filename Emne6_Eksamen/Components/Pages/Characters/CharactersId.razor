@inject CharacterService CharacterService

@page "/Character/{id:int}"

@if (loaded)
{
    @if (characterData != null)
    {
        <p>ID: @characterData.id</p>
        <h3>Name: @characterData.name</h3>
        
        <p>Realm: @DisplayValue(realmData.name, "Something went wrong when getting the data.")</p>

        <p>Height: @characterData.height</p>
        
        <p>Hair color: @characterData.hair_color</p>
        
        <p>Eye color: @characterData.eye_color</p>
        
        <p>Date of birth: @characterData.date_of_birth</p>
        
        <p>Date of death: @characterData.date_of_death</p>
        
        <p>Gender: @characterData.gender</p>
        
        <p>Species: @DisplayValue(speciesData.name, "Something went wrong when getting the data.")</p>
        
        <p>Race: @DisplayValue(raceData.name, "Something went wrong when getting the data.")</p>
        
        <p>Group: @DisplayValue(groupData.name, "Something went wrong when getting the data.")</p>

        <p>Weapons:</p>
        <ul>
            @foreach (var weapons in characterData.weapons)
            {
                <li>@weapons</li>
            }
        </ul>

        // Remove this @if/else part and uncomment the one below about Languages if API works as it should.
        @if (languagesData.Any())
        {
            <p>Languages: This one is a little buggy because the API isn't working as it should.</p>
            <ul>
                @foreach (var language in languagesData)
                {
                    <li>@language.name</li>
                }
            </ul>
        }
        else
        {
            <p>Languages: Something went wrong when getting the data.</p>
        }
        
        @* <p>Languages:  *@
        @*     @DisplayList(languagesData.Select(l => l.name), "Something went wrong when getting the data.") *@
        @* </p> *@
        
        <p>Films: @DisplayList(filmsData.Select(f => f.title), "Something went wrong when getting the data.")</p>
        
        <p>Books: @DisplayList(booksData.Select(b => b.title),  "Something went wrong when getting the data.")</p>
        
    }

    else
    {
        <p>Missing data.</p>
    }
}
else
{
    <p>Loading...</p>
}

@code {
    [Parameter]
    public int id { get; set; }
    
    bool loaded = false;
    private List<LanguagesData> languagesData;
    private List<BooksCharData> booksData;
    private List<FilmsData> filmsData;
    private GroupData groupData;
    private RaceData raceData;
    private SpeiciesData speciesData;
    private RealmData realmData;
    private CharacterData characterData;

    protected override async Task OnInitializedAsync()
    {
        loaded = false;
        characterData = CharacterService.GetByID(id);

        if (characterData != null)
        {
            var realmTask = CharacterService.GetRealmAsync(characterData.realm);
            var speciesTask = CharacterService.GetSpeiciesAsync(characterData.species);
            var raceTask = CharacterService.GetRaceAsync(characterData.race);
            var groupTask = CharacterService.GetGroupAsync(characterData.group);
            var filmsTask = CharacterService.GetFilmsAsync(characterData.films);
            var booksTask = CharacterService.GetBooksAsync(characterData.books);
            var languagesTask = CharacterService.GetLanguagesAsync(characterData.languages);
            
            await Task.WhenAll(realmTask, speciesTask, raceTask, groupTask, filmsTask, booksTask, languagesTask);
            
            realmData = await realmTask;
            speciesData = await speciesTask;
            raceData = await raceTask;
            groupData = await groupTask;
            filmsData = await filmsTask;
            booksData = await booksTask;
            languagesData = await languagesTask;

        }
        
        loaded = true;
    }
    
    private string DisplayValue(string value, string errorMsg)
    {
        return string.IsNullOrWhiteSpace(value) 
            ? errorMsg 
            : value;
    }

    private RenderFragment DisplayList(IEnumerable<string> items, string errorMsg) => builder =>
    {
        builder.OpenElement(0, "span");
        builder.CloseElement();
        
        if (items?.Any() == true)
        {
            builder.OpenElement(2, "ul");

            int seq = 3;
            foreach (var item in items)
            {
                builder.OpenElement(seq++, "li");
                builder.AddContent(seq++, item);
                builder.CloseElement();
            }

            builder.CloseElement();
        }
        else
        {
            builder.OpenElement(2, "span");
            builder.AddContent(3, errorMsg);
            builder.CloseElement();
        }
    };

}